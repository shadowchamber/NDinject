<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InjectND</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Inversion of control container
/// </summary>
public class InjectND implements IInjectND
{
    private Map dependencies;
    private Map instances;
    private Set singletones;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard controller.
    /// </summary>
    protected void new()
    {
        dependencies = new Map(Types::String, Types::String);
        singletones = new Set(Types::String);
        instances = new Map(Types::String, Types::Class);
        instances.add(classStr(IInjectND), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static public constructor
    /// </summary>
    /// <returns>dependency container as INDinject</returns>
    public static IInjectND construct()
    {
        return new InjectND();
    }

]]></Source>
			</Method>
			<Method>
				<Name>withBound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns dependency and returns container object.
    /// </summary>
    /// <param name = "_interface">Interface id.</param>
    /// <param name = "_implementation">Implementation class id.</param>
    /// <param name = "_singleton">true if single instance required.</param>
    /// <returns>NDinject object.</returns>
    public InjectND withBound(ClassName _interface, ClassName _implementation, boolean _singleton = false)
    {
        this.bind(_interface, _implementation, _singleton);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withSelfBound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns dependency and returns container object.
    /// </summary>
    /// <param name = "_implementation">Implementation class name.</param>
    /// <param name = "_singleton">true if single instance required.</param>
    /// <returns>NDInject object.</returns>
    public InjectND withSelfBound(ClassName _implementation, boolean _singleton = false)
    {
        this.bind(_implementation, _implementation, _singleton);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bind</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers a new dependency.
    /// </summary>
    /// <param name = "_interface">Interface name.</param>
    /// <param name = "_implementation">Implementation class name.</param>
    /// <param name = "_singleton">true if single instance required.</param>
    public void bind(ClassName _interface, ClassName _implementation, boolean _singleton = false)
    {
        dependencies.add(_interface, _implementation);
        SysDictClass dictClass = new SysDictClass(className2Id(_interface));
        if (_singleton)
        {
            singletones.add(_interface);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>get</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets instance of the required service.
    /// </summary>
    /// <param name = "_interface">Interface name.</param>
    /// <returns>Initialized object.</returns>
    public object get(ClassName _interface)
    {
        if (singletones.in(_interface)
            && instances.exists(_interface))
        {
            Object iobj = instances.lookup(_interface);
            if (iobj != null)
            {
                return iobj;
            }
        }

        Object res;
        ClassName implName = dependencies.exists(_interface) ? dependencies.lookup(_interface) : _interface;
        ClassId implClassId = className2Id(implName);
        SysDictClass dictImpl = new SysDictClass(implClassId);

        if (dictImpl.isInterface())
        {
            SysDictClass dictClass = new SysDictClass(className2Id(_interface));
            List implemented = dictClass.implementedBy();
            ListEnumerator enumerator = implemented.getEnumerator();

            while (enumerator.moveNext())
            {
                if (implClassId == enumerator.current())
                {
                    continue;
                }

                dictImpl = new SysDictClass(enumerator.current());
                str iname = dictImpl.name();
                str ending = strLen(iname) < 4 ? '' : subStr(iname, strLen(iname) - 3, 4);

                if (dictImpl.isInterface()
                    || ending == 'Mock')
                {
                    continue;
                }

                implClassId = enumerator.current();

                break;
            }
        }

        SysDictClass dictClass = new SysDictClass(implClassId);
        Set methods = dictClass.methods();
        SetEnumerator setEnumerator = methods.getEnumerator();
        SysDictMethod dictMethod = null;

        while (setEnumerator.moveNext())
        {
            dictMethod = setEnumerator.current();
            if (dictMethod.name() == 'new')
            {
                break;
            }
            dictMethod = null;
        }

        if (dictMethod == null)
        {
            res = dictClass.makeObject();
            return res;
        }

        int i;
        Array args = new Array(Types::Class);
        int argsCount = 0;

        for(i = 1; i <= dictMethod.parameterCnt(); i++)
        {
            str typeName = dictMethod.parameterTypeName(i);
            Object obj = this.get(typeName);
            obj = this.get(typeName);
            args.value(i, obj);
            argsCount++;
        }

        if (argsCount == 0)
        {
            res = dictClass.makeObject();
        }
        else if (argsCount == 1)
        {
            res = dictClass.makeObject(args.value(1));
        }
        else if (argsCount == 2)
        {
            res = dictClass.makeObject(args.value(1), args.value(2));
        }
        else if (argsCount == 3)
        {
            res = dictClass.makeObject(args.value(1), args.value(2), args.value(3));
        }
        else if (argsCount == 4)
        {
            res = dictClass.makeObject(args.value(1), args.value(2), args.value(3), args.value(4));
        }
        else if (argsCount == 5)
        {
            res = dictClass.makeObject(args.value(1), args.value(2), args.value(3), args.value(4), args.value(5));
        }
        else if (argsCount == 6)
        {
            res = dictClass.makeObject(args.value(1), args.value(2), args.value(3), args.value(4), args.value(5), args.value(6));
        }
        else if (argsCount == 7)
        {
            res = dictClass.makeObject(args.value(1), args.value(2), args.value(3), args.value(4), args.value(5), args.value(6), args.value(7));
        }
        else if (argsCount == 8)
        {
            res = dictClass.makeObject(args.value(1), args.value(2), args.value(3), args.value(4), args.value(5), args.value(6), args.value(7), args.value(8));
        }
        else if (argsCount == 9)
        {
            res = dictClass.makeObject(args.value(1), args.value(2), args.value(3), args.value(4), args.value(5), args.value(6), args.value(7), args.value(8), args.value(9));
        }
        else if (argsCount == 10)
        {
            res = dictClass.makeObject(args.value(1), args.value(2), args.value(3), args.value(4), args.value(5), args.value(6), args.value(7), args.value(8), args.value(9), args.value(10));
        }
        else
        {
            throw Error("@NDinject:ErrorMoreThan10ArgsIsNotSupportedYet");
        }

        if (singletones.in(_interface)
            && !instances.exists(_interface))
        {
            instances.add(_interface, res);
        }

        return res;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>